#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/ure/Rule.h>
#include <opencog/ure/backwardchainer/BackwardChainer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/algorithm.h>
#include <cxxtest/TestSuite.h>
#include <string>
#include <vector>
#include <cmath>

using namespace opencog;

/*
 * Integration test for pln rules
 * Test that the rules can be used together with each other.
 */
class PLNUTest: public CxxTest::TestSuite
{
private:
	AtomSpacePtr as;
	SchemeEval eval;

public:
	PLNUTest() : as(createAtomSpace()), eval(as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		ure_logger().set_level(Logger::DEBUG);
		ure_logger().set_timestamp_flag(false);
		ure_logger().set_print_to_stdout_flag(true);

		std::string cur_ppp_dir = std::string(PROJECT_SOURCE_DIR),
			cur_dir = cur_ppp_dir + "/tests/pln/rules",
			src_rule_dir = cur_ppp_dir + "/opencog/pln/rules";
		std::vector<std::string> load_paths = {cur_ppp_dir, cur_dir, src_rule_dir};
		for (std::string& p : load_paths)
		{
			std::string eval_str = std::string("(add-to-load-path \"") + p + std::string("\")");
			eval.eval(eval_str);
		}

		eval.eval("(use-modules (opencog))");
		eval.eval("(use-modules (opencog ure))");
		eval.eval("(use-modules (opencog pln))");
	}

	~PLNUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp();
	void tearDown();
	void load_scm_files(std::vector<std::string>);

	void test_modus_ponens();
};

void PLNUTest::tearDown()
{
	as->clear();
}

void PLNUTest::setUp()
{
}

void PLNUTest::load_scm_files(std::vector<std::string> files)
{
	std::string hd("(load-from-path \"");
	std::string tl("\")");
	for (auto f: files) {
		std::string result = eval.eval(hd + f + tl);
		logger().debug() << "[PLNUTest] Loaded \"" << f << "\":"
		                 << std::endl << result;
	}
}

// Simple modus ponens backward chainer test, however it involves more
// rules to make sure that PLN isn't confused when using multiple
// rules.
void PLNUTest::test_modus_ponens()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	std::string rs;

	// Load a number of rules
	rs = eval.eval("(pln-load-rule 'inheritance-modus-ponens)");
	rs = eval.eval("(pln-load-rule 'implication-modus-ponens)");
	rs = eval.eval("(pln-load-rule 'subset-modus-ponens)");
	rs = eval.eval("(pln-load-rule 'contraposition-implication)");
	rs = eval.eval("(pln-load-rule 'contraposition-inheritance)");

	// Load KB
	load_scm_files({"tests/pln/modus-ponens-contraposition.scm"});

	Handle target = eval.eval_h("target");
	Handle result = eval.eval_h("(pln-bc target)");

	// Check the result
	Handle front = result->getOutgoingAtom(0);
	TS_ASSERT_EQUALS(front, target);
	TS_ASSERT_DELTA(front->getTruthValue()->get_mean(), 0.68, 1e-3);
}
